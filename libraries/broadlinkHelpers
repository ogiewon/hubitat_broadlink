/*

Copyright 2022 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.3 - tomw - Rework app UI to use buttons.
0.9.2 - tomw - Rename codes (supported in app).
0.9.0 - tomw - Initial release.

*/

library (
    author: "tomw",
    category: "",
    description: "Broadlink helpers",
    name: "broadlinkHelpers",
    namespace: "tomw",
    documentationLink: "",
    importUrl: "https://raw.githubusercontent.com/tomwpublic/hubitat_broadlink/main/libraries/broadlinkHelpers"
)

import groovy.transform.Field
import hubitat.helper.HexUtils


////////////////////////////
// saved codes operations
////////////////////////////

@Field String codesSync = ""

def deleteSavedCode(name)
{
    def res
    synchronized(codesSync)
    {
        res = state.codes?.remove(name)
    }
    
    if(res)
    {
        log.info "removed code: ${name}"
        return true        
    }
    else
    {
        log.info "code not found: ${name}"
        return false
    }
}

def addSavedCode(name, code)
{
    if(null == state.codes) { clearSavedCodes() }
    
    Map codeEntry = [(name): code]
    logDebug("adding code: ${codeEntry}")
    
    synchronized(codesSync)
    {
        state.codes << codeEntry
    }
    
    return codeEntry
}

def getSavedCode(name)
{
    codes = state.codes
    
    // try to get at user-specific name first,
    //   then check against modified naming style used by old integration as a last resort
    code = codes?.get(name) ?: codes?.get(name?.tokenize(" ,!@#\$%^&()")?.join("_"))
    
    if(null == code)
    {
        log.info "code not found: ${name}"
    }
    
    return code
}

def renameSavedCode(oldName, newName)
{
    if([oldName, newName].contains(null)) { return }
    
    def code = getSavedCode(oldName)    
    if(!code) { return }
    
    if(deleteSavedCode(oldName))
    {
        return addSavedCode(newName, code)
    }
}

def clearSavedCodes()
{
    synchronized(codesSync)
    {
        state.codes = [:]
    }
}

def importCodes(String codeStore)
{
    // use codeStore from previous integration, using "name1=code1,name2=code2"
    //   Hubitat formatting in State Variables, with or without {}
    codeStore = codeStore?.replace('{','')?.replace('}','')
    
    // turn it into a map...
    codeStore?.split(',')?.each
    {
        def entry = it.split('=')
        if(entry.size() == 2)
        {
            // ...and import each one
            addSavedCode(entry[0].toString().trim(), entry[1].toString().trim())
        }
    }
}

def allKnownCodesMap()
{
    return state.codes ?: [:]
}

def allKnownCodesKeys()
{
    return allKnownCodesMap()?.keySet()?.sort()
}

////////////////////////////
// pronto codes operations
////////////////////////////

def convertProntoToBroadlink(pronto)
{
    def codes = parseProntoStringToCodes(pronto)
    
    if(!codes || (codes == []))
    {
        logDebug("pronto error: invalid bytes")
    }
    
    if(validateProntoCodes(codes))
    {
        return buildBroadlinkFromProntoCodes(codes)        
    }
}

def buildBroadlinkFromProntoCodes(codes)
{
    // http://www.remotecentral.com/features/irdisp2.htm
    // https://github.com/mjg59/python-broadlink/blob/master/protocol.md
    
    // freq in MHz
    def freq = 1 / (codes[1] * 0.241246)
    logDebug("freq = ${freq}")
    
    def mult = (269 / 8192) / freq
    logDebug("pulse mult = ${mult}")
    
    def pairsCnt1 = codes[2]
    def pairsCnt2 = codes[3]
    
    def strCode = ""
    byte[] tmpCode
    def codeVal
    
    for(i = 4; i < 2*(pairsCnt1 + pairsCnt2) + 4; i++)
    {
        codeVal = (codes[i] * mult).toInteger()
        
        if(codeVal <= 0xFF)
        {
            tmpCode = [codeVal]            
        }
        else
        {
            // leading zero, then big-endian if larger than one byte
            tmpCode = [0, 0xFF & (codeVal >> 8), 0xFF & codeVal]
        }

        strCode += HexUtils.byteArrayToHexString(tmpCode)
    }
    
    logDebug("raw pronto conversion: ${strCode}")
    
    // length of raw conversion (no header, no leadout)
    def len = HexUtils.hexStringToByteArray(strCode).size()
    len = HexUtils.byteArrayToHexString([0xFF & len, 0xFF & (len >> 8)] as byte[])
    
    strCode = "2600" + len + strCode
    
    // IR leadout (standard)
    strCode += HexUtils.byteArrayToHexString([0x0d, 0x05] as byte[])
    
    return strCode
}

def parseProntoStringToCodes(pronto)
{
    if(!pronto || (pronto == "")) { return }
    
    def code = pronto.replace(" ", "")
    byte[] bCode = HexUtils.hexStringToByteArray(code)
    
    def codes = []
    for(i = 0; i < bCode.size(); i = i + 2)
    {
        // repack this into 2-byte codes
        codes += ((bCode[i] & 0xFF) << 8) | (bCode[i+1] & 0xFF)
    }
    
    return codes
}

def validateProntoCodes(codes)
{
    if(0 != codes[0] || 0 == codes[1])
    {
        // first word must be 0x0000
        // second word is frequency and should be non-zero
        
        logDebug("pronto error: invalid preamble")
        return
    }
        
    def pairsCnt1 = codes[2]
    def pairsCnt2 = codes[3]
    
    if((codes.size() - 4) != (2 * (pairsCnt1 + pairsCnt2)))
    {
        // check remaining data against expected numbers of *pairs*
        
        logDebug("pronto error: invalid size")
        return
    }
    
    return [pairsCnt1: pairsCnt1, pairsCnt2: pairsCnt2]
}

//////////////////////////////////////
// volatile state
//////////////////////////////////////

@Field static volatileState = [:].asSynchronized()

def vsUid()
{
    return device?.getDeviceNetworkId() ?: app.getId()
}

def setVolatileState(name, value)
{
    def tempState = volatileState[vsUid()] ?: [:]
    tempState.putAt(name, value)
    
    volatileState.putAt(vsUid(), tempState)
    
    return volatileState
}

def getVolatileState(name)
{
    return volatileState.getAt(vsUid())?.getAt(name)
}
